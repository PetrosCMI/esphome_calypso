esphome:
  name: calypso-ha
  friendly_name: Calypso_HA
  platformio_options: 
    board_build.flash_mode: dio

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "7K/i1bi0MN/D2faPI1d6iekhbAYjgMcIl6ndOMtm85E="

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Calypso-Ha Fallback Hotspot"
    password: !secret device_wifi_password

substitutions:
  calypso_mac_addr: 'F1:99:0B:73:1F:BB'    # Find the Mac Addr of your device and enter here
  calypso_update_interval: 1s

captive_portal:

esp32_ble_tracker:

ble_client:
  - mac_address: ${calypso_mac_addr}
    id: calypso_wind_sensor
    on_passkey_request:
      then:
        - logger.log:
            format: "Got on_passkey_request from BLE device"

    on_connect:
      then:
        - lambda: |-
            ESP_LOGW("BLE Client", "Connected to ULTRASONIC wind sensor.");

            // REF:  https://github.com/stephpen/BLE_Wind/blob/main/BLE_Wind.ino
            auto *client = id(calypso_wind_sensor);
            if (client->connected()) {
              // Write to characteristic 0xA003 - Data Fields
              auto characteristic = client->get_characteristic(0x180D, 0xA003);
              if (characteristic) {
                uint8_t value = 0x00;   // 0 reads just the basic data, 1 reads extended data but at heavy battery use
                characteristic->write_value(&value, 1);
                ESP_LOGI("BLE Client", "Wrote value %02x to characteristic A003", value);
              } else {
                ESP_LOGE("BLE Client", "Failed to find characteristic A003");
              }
              // Write to characteristic 0xA002 - Data Rate
              auto characteristic_A002 = client->get_characteristic(0x180D, 0xA002);
              if (characteristic_A002) {
                uint8_t value_A002 = 0x01;    // 1hz updates for least power drain
                characteristic_A002->write_value(&value_A002, 1);
                ESP_LOGI("BLE Client", "Wrote value %02x to characteristic A002", value_A002);
              } else {
                ESP_LOGE("BLE Client", "Failed to find characteristic A002");
              }
            } else {
              ESP_LOGE("BLE Client", "Failed to connect to BLE client");
            }

    on_disconnect:
      then:
        - lambda: |-
            ESP_LOGW("BLE Client", "Disconnected from ULTRASONIC wind sensor.");

sensor:
  - platform: ble_client
    ble_client_id: calypso_wind_sensor
    name: "Calypso Wind Sensor"
    service_uuid: "180D"
    characteristic_uuid: "2A39"
    # This fails because esphome is trying to process a float: https://www.esphome.io/api/ble__client__base_8cpp_source
    # 
    type: characteristic  # Add this line to specify the type as characteristic
    notify: True
    lambda: |-
      ESP_LOGW("BLE main", "Received data is %d bytes: %s", x.size(), format_hex_pretty(x).c_str());
      //uint8_t d0 = x[0];
      uint16_t speed_raw = x[0] | ( x[1] << 8 );
      // Combine the first two bytes into a 16-bit value
      uint16_t wind_speed_raw = (x[1] << 8) | x[0];
      int16_t wind_angle_raw = (x[3] << 8) | x[2];
      int16_t compass_raw = (x[9] << 8) | x[8];
      // REF: https://github.com/decipherindustries/signalk-calypso-ultrasonic/blob/master/lib/calypso-ultrasonic.js
      //      Look into the function decode()
      
      // Convert raw wind speed to float m/s, then to knots per hour
      float wind_speed = ( wind_speed_raw / 100.0 ) * 1.943844492;
      float wind_angle = wind_angle_raw * 1.0;
      float compass = 360.0 - compass_raw;
      ESP_LOGD("wind_sensor", "Received raw data: %u %d %d", wind_speed_raw, wind_angle_raw, compass_raw);  // Log the received value
      id(calypso_wind_speed).publish_state(wind_speed);  // Update the sensor state in Home Assistant
      id(calypso_wind_angle).publish_state(wind_angle);  // Update the sensor state in Home Assistant
      id(calypso_battery_level).publish_state( x[4] * 10.0 );
      id(calypso_temperature).publish_state( x[5] - 100.0 );
      //id(calypso_compass_direction).publish_state(compass);  // Update the sensor state in Home Assistant
      //id(calypso_roll).publish_state( x[6] - 90.0 );
      //id(calypso_pitch).publish_state( x[7] - 90.0 );
      return(0);

  - platform: template
    id: calypso_wind_speed
    name: "Calypso Wind Speed"
    unit_of_measurement: "kts"
    accuracy_decimals: 2
    icon: "mdi:weather-windy"
    update_interval: ${calypso_update_interval}

  - platform: template
    id: calypso_wind_angle
    name: "Calypso Wind Angle"
    unit_of_measurement: "Â°"
    accuracy_decimals: 2
    icon: "mdi:compass"
    update_interval: ${calypso_update_interval}

  - platform: template
    id: calypso_battery_level
    name: "Calypso Battery Level"
    unit_of_measurement: "%"
    accuracy_decimals: 1
    update_interval: ${calypso_update_interval}

  - platform: template
    id: calypso_temperature
    name: "Calypso Temperature"
    unit_of_measurement: "C"
    accuracy_decimals: 1
    update_interval: ${calypso_update_interval}
    
